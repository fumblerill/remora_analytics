const customColumnOrder = {
  statisticsTable: [
    "–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ú–û",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–∏–π –°–≠–ú–î",
    "–°–≠–ú–î —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –†–≠–ú–î",
    "–°–≠–ú–î –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –†–≠–ú–î",
    "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
  ],
  docPerfTable: [
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–∏–π –°–≠–ú–î",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –°–≠–ú–î"
  ],
  errorsDictTable: [
    "–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞",
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
    "–û–ø–∏—Å–∞–Ω–∏–µ"
  ]
};

function initTabulators() {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å JSON (–ø–æ ID, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–º—É—Å—è –Ω–∞ -json)
  document.querySelectorAll("template[id$='-json']").forEach(template => {
    const id = template.id.replace("-json", ""); // –Ω–∞–ø—Ä–∏–º–µ—Ä: statisticsTable-json ‚Üí statisticsTable
    const container = document.getElementById(id);

    if (!container) {
      console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å ID '${id}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É JSON –∏–∑ —à–∞–±–ª–æ–Ω–∞
    const jsonString = template.innerHTML.trim();

    if (!jsonString) {
      console.error(`‚ùå –®–∞–±–ª–æ–Ω —Å ID '${template.id}' –ø—É—Å—Ç`);
      return;
    }

    let data;
    try {
      data = JSON.parse(jsonString);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –¥–ª—è '${id}':`, error);
      return;
    }

    if (!Array.isArray(data) || data.length === 0) {
      container.innerHTML = "<p class='text-muted'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>";
      return;
    }

    let columnKeys = Object.keys(data[0]);

    if (customColumnOrder[id]) {
      const defined = customColumnOrder[id];
      const rest = columnKeys.filter(k => !defined.includes(k));
      columnKeys = [...defined, ...rest];
    }

    const seen = new Set();
    const columns = columnKeys
      .filter(key => {
        if (seen.has(key)) return false;
        seen.add(key);
        return true;
      })
      .map(key => ({
        title: key,
        field: key,
        headerFilter: true
      }));

      const layoutMode = id === "rawTable" ? "fitData" : "fitColumns";

      new Tabulator(container, {
        data: data,
        columns: columns,
        height: 400,
        layout: layoutMode,
        responsiveLayout: false,  // –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        pagination: true,
        paginationSize: 100,
        placeholder: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      });

    // // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
    // new Tabulator(container, {
    //   data: data,
    //   columns: columns,
    //   height: 400,
    //   layout: "fitColumns",
    //   pagination: true,
    //   paginationSize: 100,
    //   placeholder: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    //   responsiveLayout: "collapse",
    // });
  });
}

function initCharts() {
  const barCanvas = document.getElementById('barChart');
  const pieCanvas = document.getElementById('pieChart');

  const { barLabels, barValues, pieLabels, pieValues } = window.chartData;

  const backgroundColors = [
    '#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00',
    '#ffff33', '#a65628', '#f781bf', '#999999', '#66c2a5', '#fc8d62'
  ];
  const barColors = barLabels.map((_, i) => backgroundColors[i % backgroundColors.length]);

  const ctxBar = barCanvas.getContext('2d');
  if (window.barChartInstance) window.barChartInstance.destroy();
  window.barChartInstance = new Chart(ctxBar, {
    type: 'bar',
    data: {
      labels: barLabels,
      datasets: [{
        data: barValues,
        backgroundColor: barColors,
        borderRadius: 4,
        borderWidth: 1
      }]
    },
    options: {
      indexAxis: 'x',
      responsive: true,
      plugins: {
        legend: {
          display: true,
          position: 'right',
          labels: {
            generateLabels: (chart) =>
              chart.data.labels.map((label, i) => ({
                text: label,
                fillStyle: barColors[i],
                strokeStyle: barColors[i],
                index: i
              }))
          }
        },
        datalabels: { display: false }
      },
      scales: {
        x: { beginAtZero: false, ticks: { display: false }, grid: { display: false } },
        y: { beginAtZero: true, ticks: { precision: 0 } }
      }
    },
    plugins: [ChartDataLabels]
  });

  const ctxPie = pieCanvas.getContext('2d');
  if (window.pieChartInstance) window.pieChartInstance.destroy();
  window.pieChartInstance = new Chart(ctxPie, {
    type: 'pie',
    data: {
      labels: pieLabels,
      datasets: [{
        data: pieValues,
        backgroundColor: backgroundColors.slice(0, pieValues.length)
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      layout: { padding: { top: 20, bottom: 20 } },
      plugins: {
        legend: {
          position: 'right',
          labels: { padding: 20 }
        },
        datalabels: {
          color: '#000',
          font: { weight: 'bold' },
          formatter: (value, context) => {
            const data = context.chart.data.datasets[0].data;
            const total = data.reduce((a, b) => a + b, 0);
            return ((value / total) * 100).toFixed(1) + '%';
          }
        }
      }
    },
    plugins: [ChartDataLabels]
  });
}

// –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
function startPage() {
  try {
    initTabulators();
    initCharts();
  } catch (e) {
    console.error("üî• –û—à–∏–±–∫–∞ –≤ startPage:", e);
  }

  const wrapper = document.getElementById("content-wrapper");
  const preloader = document.getElementById("preloader");

  if (wrapper) {
    wrapper.style.display = "block";
    setTimeout(() => {
      wrapper.style.opacity = "1";
      if (preloader) preloader.remove();
    }, 100);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("load", () => {
  setTimeout(() => {
      startPage();
  }, 50);
});